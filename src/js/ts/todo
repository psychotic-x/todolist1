class todoitem{
    name : string;
    isdone : boolean;
    isdelete : boolean;
    constructor(name?:string){
        this.name = name|| "";
        this.isdone = false;
        this.isdelete = false;
    }

    public finish () : void {
        this.isdone = true;
    }

    public delete () : void {
        this.isdelete = true;
    }

}

class todolist {
    item : Array<todoitem> | null;

    constructor(item? : todoitem [] ){
        if (item)
        {
            this.item = item;
        }else
            this.item = new Array<todoitem>();
    }

    public init(item? : Array<todoitem> ) {
        if (item ) {
            this.item = item;
        } else
            this.item = new Array<todoitem>();
    }

    public additem (item: todoitem ) {
        this.item.push(item);
    }

    public edititem (newitem :  todoitem, olditem : todoitem ){
        let i = this.item.indexOf(olditem);
        this.item[i]=newitem;
    }

    public deleteitem (item : todoitem){
        let i = this.item.indexOf(item);
        this.item.splice( i+1, 1);
    }

}
let toDoList = new todolist();

let ul = document.querySelector("ul");
let data = document.querySelector("input");
let btn = document.querySelector("button");

function clickAddItem (event){
    let ul = document.querySelector("ul");
    let todoitem = document.createElement("li");
    let isfinished = document.createElement("input");
    let todovalue = document.createElement("span");
    let isdelete = document.createElement("i");
    todovalue.innerText = event.target.innerText.
    isdelete.innerText = "×";
    isfinished.innerText = "删除";
    isfinished.setAttribute("type","checkbox");
    todoitem.appendChild(isfinished);
    todoitem.appendChild(todovalue);
    todoitem.appendChild(isdelete);
    ul.appendChild(todoitem);
    debugger;
}

function keyupAddItem(event) {
    let e = event.key;
    if (e == "ENTER" || e == "SPACEBAR") {
        clickAddItem(event);
    }

}

function eventDelegate  (parentSelector, targetSelector, events, foo) {
    function triFunction(e) {
        var event = e || window.event;
        var target = event.target || event.srcElement;
        var currentTarget = event.currentTarget;
        if (!Element.prototype.matches) {
            Element.prototype.matches =
                Element.prototype.webkitMatchesSelector ||
                function (s) {
                    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                        i = matches.length;
                    while (--i >= 0 && matches.item(i) !== this) {
                    }
                    return i > -1;
                };
        }
        while (target !== currentTarget) {
            if (target.matches(targetSelector)) {
                var sTarget = target;
                // 执行绑定的函数，注意 this
                foo.call(sTarget, Array.prototype.slice.call(arguments))
            }

            target = target.parentNode;
        }
    }
}
function editItem (event){
    if(event.target.nodeName.toLocaleLowerCase === 'li')
    {
        let item = event.target;
        let parentItem = item.parentElement;
        item.innerHTML = "<input />";
        if(event.code==="Enter"){
            item.innerHTML=parentItem.querySelector("input").value;
        }
    }

}
function beFinished(){}
function deleteItem(){}
function initItem(){}
function saveToDoList(ToDoList,toDoList){
    window.localStorage.setItem(ToDoList, JSON.stringify(todolist).toString());
}
function getToDoList(ToDoList){
    return JSON.parse(localStorage.getItem(ToDoList));
}
window.onload = function init() {
    toDoList = getToDoList("ToDoList");
    initItem();
    eventDelegate("ul","li","click", "editItem");
    eventDelegate("ul","li","click", "beFinished");
    eventDelegate("ul","li","click", "deleteItem");
}

window.onbeforeunload = function fashPage(){
    saveToDoList("ToDoList",toDoList);
}





